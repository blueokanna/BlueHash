/// Generates a constant value for the round using input data, round number, hash length,
/// and a secret key. This constant is used for permutations in the hash algorithm.
/// The generation process is designed to introduce enough randomness and complexity,
/// making it resistant to both classical and quantum attacks.
// <Author: BlueOkanna>
// <Email: blueokanna@gmail.com>
/// # Arguments
/// * `round` - The current round number in the hash algorithm.
/// * `input_data` - The input data used to generate the noise.
/// * `hash_length` - The length of the hash output, used to adjust the constant.
///
/// # Returns
/// A 64-bit unsigned integer representing the generated constant.

use crate::noise::generate_lwe_noise;

pub const SBOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
    0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
    0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
    0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
    0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
    0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
    0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
    0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
    0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
    0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
    0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

/// 根据轮次、输入数据和哈希长度生成混合常量，使用预计算旋转和噪声预处理增强非线性
pub fn generate_constants<T>(round: usize, input_data: &[T], _hash_length: usize) -> u64
where
    T: Copy
    + Into<u64>
    + std::ops::BitXor<Output = T>
    + std::ops::Shl<u32, Output = T>
    + std::ops::BitAnd<Output = T>,
{
    fn precompute_rotation(value: u64, shift_left: u32, shift_right: u32) -> (u64, u64) {
        (value.rotate_left(shift_left), value.rotate_right(shift_right))
    }
    let prime = 0x9E3779B97F4A7C15u64;
    let round_factor = round.wrapping_add(0xABCDEF1234567890);
    let extra_prime = 0x7FFFFFFFFFFFFFFFu64;
    let (round_factor_rot_left, round_factor_rot_right) = precompute_rotation(round_factor as u64, 32, 16);
    let (rotated_prime, _) = precompute_rotation(prime, (round % 64) as u32, 0);
    let (extra_prime_rot_left, _) = precompute_rotation(extra_prime, (round % 32) as u32, 0);
    let noise = generate_lwe_noise(input_data, round, prime).rotate_left(8);
    let noise_sub = SBOX[(noise as u8) as usize] as u64;
    let combined = rotated_prime
        .wrapping_mul(round_factor_rot_left)
        .wrapping_add(round_factor_rot_right)
        .wrapping_add(extra_prime_rot_left);
    let mix1 = combined.rotate_left((round % 64) as u32);
    let mix2 = noise_sub.rotate_right((round % 32) as u32);
    let nonlinear = mix1.wrapping_mul(0x53FA0915).wrapping_add(mix2 ^ prime);
    let mut bytes = nonlinear.to_be_bytes();
    for byte in &mut bytes {
        *byte = SBOX[*byte as usize];
    }
    u64::from_be_bytes(bytes)
}

